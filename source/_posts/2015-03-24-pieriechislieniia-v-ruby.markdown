---
layout: post
title: "Перечисления в Ruby"
date: 2015-03-24 14:59:12 +0200
comments: true
author: Sergey Gernyak
categories: [ruby, enum]
---

Во многих языках программирования можно встретить, так называемые,
**перечисления** или **enum**, которые представляют из себя набор
именованых констант. Например, в языке C# их можно объявить следующим образом:

{% codeblock land:csharp Листинг 1 - Enum в C# %}
enum Days {Mon, Tue, Wed, Thu, Fri, Sat, Sun};

day = Days.Mon;
{% endcodeblock %}

В ruby нет встроенного типа __enum__, но есть несколько приемов как
такое можно реализовать из того, что есть под рукой :-)

### Вариант 1 - Быстрый и понятный

Все что нам нужно - модуль и константы. Код будет следующим:

{% codeblock lang:ruby Листинг 2 - Ruby Enum 1 %}
module Days
  MON = 1
  TUE = 2
  # и так далее
end

puts Days::MON # => 1
{% endcodeblock %}

Я думаю, что здесь особо ничего не нужно комментировать.

### Вариант 2

Вот такой интересный вариант я нагуглил:

{% codeblock lang:ruby Листинг 3 - Ruby Enum 2 %}
Days = [Mon = 1, Tue = 2, ...]

puts Mon # => 1
{% endcodeblock %}

Но данный подход, как по мне, имеет несколько недостатков:

- Теряется _namespace_, для этого нужно код выше поместить еще в модуль
- Необходимо вручную прописывать значения для каждого элемента
перечисления
- Не очень удобно (но иногда все таки необходимо) использовать числа в
качестве значений

### Вариант 3

Необходимо будет написать дополнительно пару строк кода и... вуаля!

{% codeblock lang:ruby Листинг 4 - Ruby Enum 3 %}
module Enumable
  def enum(*args)
    args.flatten.each { |const| const_set(const, const) }
  end
end

module Days
  include Enumable

  enum "MON", "TUE", "WED", ...
end

puts Days::MON # => 'MON'
{% endcodeblock %}

Такой вариант очень удобен и читабелен, особенно если вы хотите
устанавливать определенные значения для какой-либо записи в БД. Ведь
сразу понятнее такая информация `event.day_of_week # => 'MON'`, чем
`event.day_of_week # => 1`.

### Заключение

На самом деле можно нагуглить очень много вариантов реализации и вы
можете выбрать именно тот, который вам по душе и лучше всего подходит к
решению конкретной задачи.

P.S. Вот, на мой взгляд, одна из самых лучших реализаций [ruby enum](https://github.com/dblock/ruby-enum)
