<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Helpers | AlterEGO Labs official blog]]></title>
  <link href="http://alterego-labs.github.io/blog/categories/helpers/atom.xml" rel="self"/>
  <link href="http://alterego-labs.github.io/"/>
  <updated>2015-11-14T11:40:20+02:00</updated>
  <id>http://alterego-labs.github.io/</id>
  <author>
    <name><![CDATA[AlterEGO Labs]]></name>
    <email><![CDATA[alteregolabs@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Helpers: WHY?!?]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/09/29/rails-helpers-why/"/>
    <updated>2015-09-29T14:10:29+03:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/09/29/rails-helpers-why</id>
    <content type="html"><![CDATA[<p>Наверное самым странным и непонятным (по моему мнению) компонентом
Rails являются хелперы (Helpers). Когда мы приходим в мир Rails мы много
читаем про MVC и как она реализована в Rails, прозоны ответственности
этих компонентов. Но что представляют собой Helpers, которые содержатся
в папке <code>app/helpers</code>?</p>

<h3>Что предгагают нам рельсы</h3>

<p>Хелперы представляют собой обычные модули с набором функций. Например:</p>

<pre><code class="ruby">module ApplicationHelper
  def some_useful_method(arg1)
    # some logic here
  end
end
</code></pre>

<p>Модули не являются самостоятельными единицами и в практически всегда они
инклудятся в определенный контекст для расширения.</p>

<p>Хелперы придумали для выноса части различной мелкой (в некоторых случаях
не такой уж и мелкой) логики из контролера и представления (view).
Например:</p>

<pre><code class="ruby app/helpers/application_helper.rb">module ApplicationHelper
  def hello_text
    'Hello from Helper!'
  end
end
</code></pre>

<pre><code class="ruby app/controllers/welcome_controller.rb">class WelcomeController &lt; ApplicationController
  def index
    # here `hello_text` will be available
  end
end
</code></pre>

<pre><code class="erb app/views/welcome/index.html.erb">&lt;%= hello_text %&gt;
</code></pre>

<h3>Какие проблемы</h3>

<p>Основная проблема в том, что хелперы превращаются в неконтролируемую
свалку ни к чему не привязанных функций, ведь по умолчанию все хелперы
инклудятся в любой контроллер. При этом возникает вероятность
существования нескольких функций с одинаковыми именами и тогда удачной
отладки. До определенного момента в контроллер инклудился хелпер имя
модуля которого является часть имени контроллера без <em>Controller</em> части.</p>

<p>Так как хелперы инклудятся в контекст view, то в них доступны instance variables объявленные в
контроллере. Поэтому это уменьшает возможность повторного использования,
а также увеличивает непонимание того, какие объекты являются &ldquo;игроками&rdquo;
в той или иной функции, и возвожность протестировать. Например:</p>

<pre><code class="ruby app/helpers/application_helper.rb">module ApplicationHelper
  def build_push_state(except: [], with: {})
    @push_state = PushStateBuilder.new(params, except: except, with: with).build
  end
end
</code></pre>

<p>Также из-за особенности, что хелперы доступны и в контроллере и в
представлении, иногда трудно сказать в каком логическом контексте текущая функция
должна вызываться, хотя она может быть универсальной и вызываться в
обеих.</p>

<p>Очень часто хелперы используют для формирования html сниппетов:</p>

<pre><code class="ruby app/helpers/application_helper.rb">module ApplicationHelper
  def error_messages_for(resource, decorated = true)
    return "" if resource.errors.empty?
    errors_text = resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join
    error_messages errors_text, decorated
  end
end
</code></pre>

<p>Мне кажется, что формирование HTML кода необходимо оставлять на view.</p>

<p><strong>Резюмирую</strong>: в итоге получается модули, в которых масса отдельно
сущестующих методов, которые привязаны к разным логическим контекстам выполнения
(controller или view), которые могут генерировать HTML код и много всего
другого, чего они не должны делать.</p>

<h3>Как уменьшить боль?</h3>

<p>Я бы не рекомендовал использовать хелперы вообще. Но бывают ситуации,
особенно на старте проекта, когда нужно быстро накидать рабочий
прототип, при этом особо не заморачиваясь с продумыванием сложной
объектной иерархии с распределением обязанностей. Поэтому я выделю
несколько маленьких рецептов:</p>

<ol>
<li><p>Не использовать instance variables, объявленные в контроллере или во
view. Передавайте явно параметры. При этом можно избежать side
effects, когда вы вызываете функцию, а там используется instance
variable, которой еще нет. В идеале функции, объявленные в хелперах,
должны быть <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>.</p></li>
<li><p>Выносите формирование HTML сниппетов в отдельный partial. Опять же
бывают ситуации, когда сниппет - это буквально одна строчка,
например, в зависимости от статуса выводить разную иконку.</p></li>
<li><p>Отказаться от глобального инклудинга всех хелперов. Для этого
необходимо добавить следующую строку, например в
<code>config/application.rb</code>:</p>

<pre><code class="ruby">config.action_controller.include_all_helpers = false
</code></pre></li>
<li>Отказаться от хелперов и посмотреть в сторону <strong>View Object</strong> или
<strong>ViewModel</strong> :-)</li>
</ol>


<h3>Полезные ссылки</h3>

<ul>
<li><a href="https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/helpers.rb">https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/helpers.rb</a></li>
<li><a href="https://en.wikipedia.org/wiki/Pure_function">https://en.wikipedia.org/wiki/Pure_function</a></li>
<li><a href="https://github.com/apotonick/cells">https://github.com/apotonick/cells</a></li>
<li><a href="https://github.com/drapergem/draper">https://github.com/drapergem/draper</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
