<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | AlterEGO Labs official blog]]></title>
  <link href="http://alterego-labs.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://alterego-labs.github.io/"/>
  <updated>2015-11-14T11:40:20+02:00</updated>
  <id>http://alterego-labs.github.io/</id>
  <author>
    <name><![CDATA[AlterEGO Labs]]></name>
    <email><![CDATA[alteregolabs@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby метапрограмминг и наследование]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/05/25/ruby-mietaproghrammingh-i-nasliedovaniie/"/>
    <updated>2015-05-25T11:23:10+03:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/05/25/ruby-mietaproghrammingh-i-nasliedovaniie</id>
    <content type="html"><![CDATA[<p>Ruby не перестает меня удивлять! Как по мне, то самое удивительное и
мощное в нем - метапрограмминг. После статического языка, в котором твой
арсенал ограничен заложенными ключевыми словами и конструкциями, просто
невозможно вообразить насколько развязаны твои руки и что ты можешь со
всем этим делать! Используя динамику и выразительность Ruby можно
превратить кусок кода практически в понятную фразу на английском.</p>

<p>Элементы конструкций не ограничены! Можно создавать их самому сколько
угодно, получая в результате высокоуровневый и понятный почти любому
человеку DSL.</p>

<p>Самое главное вовремя остановится&hellip; Но не сейчас)</p>

<h3>Варианты объявления класса</h3>

<p>Все мы привыкли объявлять наши классы используя элемент синтаксиса ruby,
а именно ключевое слово <strong>class</strong>:</p>

<pre><code class="ruby">class User
end
</code></pre>

<p>Но существует еще один вариант. Т.к. класс является экземпляром класса
Class, то справедлива следующая запись:</p>

<pre><code class="ruby">User = Class.new do
  attr_accessor :name
end
</code></pre>

<p>Используя способ выше также можно указать суперкласс, просто передав его
как параметр в метод <code>Class.new</code>:</p>

<pre><code class="ruby">class User
end

RegisteredUser = Class.new(User) do
end

RegisteredUser.ancestors # =&gt; [RegisteredUser, User, Object, Kernel, BasicObject]
</code></pre>

<p><strong>Но есть одна интересная особенность!</strong></p>

<p>Когда вы несколько раз объявляете класс используя ключевое слово <em>class</em>, то реально
класс инициализируется только один раз. Все следующие разы класс
<strong>открывается</strong> для внесения изменений. Например:</p>

<pre><code class="ruby">class User
end

User.object_id # =&gt; 70299452133440

User.new.name # =&gt; NoMethodError: undefined method `name' for #&lt;User:0x007fd35b40a930&gt;

class User
  def name
    'Sergey'
  end
end

User.obect_id # =&gt; 70299452133440

User.new.name # =&gt; Sergey
</code></pre>

<p>В случае с объявлением класса, используя метод <code>Class.new</code>, ситуация
немного другая. На самом деле слово <code>User</code>, которое мы используем для
инициализации экземпляров, является практически такой же переменной,
которая ссылается на экземпляр класса <code>Class</code>. Поэтому код ниже дает,
может быть, вполне очевидные результаты:</p>

<pre><code class="ruby">class User
  def name
    'Sergey'
  end
end

User.object_id # =&gt; 70162158343080

User.new.name # =&gt; Sergey

User = Class.new do
  def second_name
    'Gernyak'
  end

  def full_name
    "#{second_name} #{name}"
  end
end

User.object_id #=&gt; 70162144228540

User.new.full_name # =&gt; NameError: undefined local variable or method `name' for #&lt;User:0x007fdb3b028b18&gt;

User.new.second_name # =&gt; Gernyak
</code></pre>

<p>Получается мы взяли и заменили значение нашей переменной <code>User</code> на
другое. Об этом также свидетельствует значение <code>object_id</code>. Поэтому наш
новый класс <code>User</code> ничего не знает о методе <code>#name</code>.</p>

<p>Правда и тут можно сделать хитрость: добавить наш существующий класс в
цепочку наследования:</p>

<pre><code class="ruby">class User
  def first_name
    'Sergey'
  end
end

User.new.name # =&gt; Sergey

User = Class.new(User) do # &lt;= Вот сюда
  def second_name
    'Gernyak'
  end

  def full_name
    "#{second_name} #{first_name}"
  end
end

User.new.full_name # =&gt; Gernyak Sergey

User.ancestors # =&gt; [User, User, Object, Kernel, BasicObject]
</code></pre>

<h3>Немного магии</h3>

<p>А почему бы не объявить динамически класс, как суперкласс для другого
класса?</p>

<pre><code class="ruby">class User &lt; Class.new
end

User.ancestors # =&gt; [User, #&lt;Class:0x007fd241dae998&gt;, Object, Kernel, BasicObject]
</code></pre>

<p>Данную фичу я использовал в одной из наших библиотек <a href="https://github.com/alterego-labs/extracted_validator">exracted_validator</a>.</p>

<p>У меня есть некоторый базовый класс, который содержит общую логику для
возможности вынесения валидаций из модели:</p>

<pre><code class="ruby">module ExtractedValidator
  class Base &lt; SimpleDelegator
    # Some logic here
  end
end
</code></pre>

<p>Но с некоторыми видами валидаций могут возникнуть проблемы, т.к. они
жестко завязаны на именование класса, в котором они объявлены. Например,
валидация <strong>uniqueness</strong>. Для того, чтобы иметь возможность использовать
такую валидацию в кастомном валидаторе, необходимо переопределить метод
<code>.model_class</code>:</p>

<pre><code class="ruby">class SignUpUserValidator &lt; ExtractedValidator::Base
  def self.model_class
    User
  end
end
</code></pre>

<p>Используя последний код, все будет работать как и ожидается и все
останутся довольны.</p>

<p>Ну почти все&hellip; Я не доволен тем, что мне принудительно нужно добавлять
еще один метод каждый раз, когда буду объявлять новый валидатор. Поэтому
я решил сделать небольшой рефакторинг используя метапрограмминг :-)</p>

<p>И вот что получилось:</p>

<pre><code class="ruby">module ExtractedValidator
  class Base &lt; SimpleDelegator
    def self.[](model)
      Class.new(self) do
        define_singleton_method :model_class do
          model
        end
      end
    end
  end
end

class SignUpUserValidator &lt; ExtractedValidator::Base[User]
end
</code></pre>

<p>В данном примере динамически создается класс-обертка, в котором
объявляется требуемый метод <code>.model_class</code> и этот метод возвращает
переданный класс, целевой для данного валидатора, модели. Цепочка
наследования может выглядеть следующим образом:</p>

<pre><code class="ruby">SignUpUserValidator.ancestors # =&gt; [SignUpUserValidator, #&lt;Class:0x007f8ec9b604b8&gt;, ExtractedValidator::Base, SimpleDelegator, Delegator, #&lt;Module:0x007f8ec9c1a138&gt;, BasicObject]
</code></pre>

<p>Вот <code>#&lt;Class:0x007f8ec9b604b8&gt;</code> как раз и есть тот самый класс-обертка!</p>

<p>На этом у меня все. <strong>Спасибо за внимание!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Перечисления в Ruby]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/03/24/pieriechislieniia-v-ruby/"/>
    <updated>2015-03-24T14:59:12+02:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/03/24/pieriechislieniia-v-ruby</id>
    <content type="html"><![CDATA[<p>Во многих языках программирования можно встретить, так называемые,
<strong>перечисления</strong> или <strong>enum</strong>, которые представляют из себя набор
именованых констант. Например, в языке C# их можно объявить следующим образом:</p>

<p><figure class='code'><figcaption><span>land:csharp Листинг 1 - Enum в C# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum Days {Mon, Tue, Wed, Thu, Fri, Sat, Sun};&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>day = Days.Mon;</span></code></pre></td></tr></table></div></figure></p>

<p>В ruby нет встроенного типа <strong>enum</strong>, но есть несколько приемов как
такое можно реализовать из того, что есть под рукой :-)</p>

<h3>Вариант 1 - Быстрый и понятный</h3>

<p>Все что нам нужно - модуль и константы. Код будет следующим:</p>

<p><figure class='code'><figcaption><span>Листинг 2 - Ruby Enum 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Days</span>
</span><span class='line'>  <span class="no">MON</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="no">TUE</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="c1"># и так далее</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts Days::MON # =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Я думаю, что здесь особо ничего не нужно комментировать.</p>

<h3>Вариант 2</h3>

<p>Вот такой интересный вариант я нагуглил:</p>

<p><figure class='code'><figcaption><span>Листинг 3 - Ruby Enum 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Days</span> <span class="o">=</span> <span class="o">[</span><span class="no">Mon</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Tue</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts Mon # =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Но данный подход, как по мне, имеет несколько недостатков:</p>

<ul>
<li>Теряется <em>namespace</em>, для этого нужно код выше поместить еще в модуль</li>
<li>Необходимо вручную прописывать значения для каждого элемента
перечисления</li>
<li>Не очень удобно (но иногда все таки необходимо) использовать числа в
качестве значений</li>
</ul>


<h3>Вариант 3</h3>

<p>Необходимо будет написать дополнительно пару строк кода и&hellip; вуаля!</p>

<p><figure class='code'><figcaption><span>Листинг 4 - Ruby Enum 3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Enumable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enum</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="nb">const_set</span><span class="p">(</span><span class="n">const</span><span class="p">,</span> <span class="n">const</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Days</span>
</span><span class='line'><span class="sr">  include Enumable&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">enum</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">MON</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">TUE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">WED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts Days::MON # =&gt; &amp;lsquo;MON&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Такой вариант очень удобен и читабелен, особенно если вы хотите
устанавливать определенные значения для какой-либо записи в БД. Ведь
сразу понятнее такая информация <code>event.day_of_week # =&gt; 'MON'</code>, чем
<code>event.day_of_week # =&gt; 1</code>.</p>

<h3>Заключение</h3>

<p>На самом деле можно нагуглить очень много вариантов реализации и вы
можете выбрать именно тот, который вам по душе и лучше всего подходит к
решению конкретной задачи.</p>

<p>P.S. Вот, на мой взгляд, одна из самых лучших реализаций <a href="https://github.com/dblock/ruby-enum">ruby enum</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Коллизия имен класса и модуля в Ruby]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/03/15/kolliziia-imien-klassa-i-modulia-v-ruby/"/>
    <updated>2015-03-15T09:33:25+02:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/03/15/kolliziia-imien-klassa-i-modulia-v-ruby</id>
    <content type="html"><![CDATA[<h3>Вот такая вот ситуация</h3>

<p>В основе статьи лежит ситуация, с которой я и мои коллеги столкнулись
при работе над одним проектом.</p>

<p>Представим себе следующее. У меня есть модель <code>Item</code>:</p>

<p><figure class='code'><figcaption><span>Листинг 0 - Модель Item app/models/item.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Затем нам дали задачу на новую фичу: пользователи могут создавать списки
и добавлять туда элементы. Мы сразу видим модель <code>List</code>:</p>

<p><figure class='code'><figcaption><span>Листинг 1 - Модель List app/models/list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Но для хранения связи между элементом и листом мы решили использовать модель
не <code>ListItem</code>, а положить ее в namespace <code>List</code>, т.е. логически
выделить эту часть подсистемы, т.к. мы предполагаем, что будут еще связанные модели.
И получается следующее:</p>

<p><figure class='code'><figcaption><span>Листинг 2 - Модель List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">List</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Как бы все идет хорошо до тех пор, пока вы не захотите использовать
<code>List::Item</code> модель где-нибудь в коде приложения:</p>

<p><figure class='code'><figcaption><span>Листинг 3 - Использование List::Item в rails console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Loading development environment <span class="o">(</span>Rails 4.0.4<span class="o">)</span>
</span><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'>TypeError: List is not a module
</span><span class='line'>    from /Users/sergio/Work/railsapps/namespace_collision_demo/app/models/list/item.rb:1:in &lt;code&gt;<span class="p">&amp;</span>lt<span class="p">;</span>top <span class="o">(</span>required<span class="o">)</span><span class="p">&amp;</span>gt<span class="p">;</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:424:in&lt;/code&gt;load&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:424:in &lt;code&gt;block in load_file<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:616:in&lt;/code&gt;new_constants_in&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:423:in &lt;code&gt;load_file<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:324:in&lt;/code&gt;require_or_load&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:463:in &lt;code&gt;load_missing_constant<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:184:in&lt;/code&gt;const_missing&#39;</span>
</span><span class='line'>    from <span class="o">(</span>irb<span class="o">)</span>:1
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands/console.rb:90:in &lt;code&gt;start<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands/console.rb:9:in&lt;/code&gt;start&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands.rb:62:in &lt;code&gt;<span class="p">&amp;</span>lt<span class="p">;</span>top <span class="o">(</span>required<span class="o">)</span><span class="p">&amp;</span>gt<span class="p">;</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from bin/rails:4:in&lt;/code&gt;require&#39;</span>
</span><span class='line'>    from bin/rails:4:in <span class="sb">`</span>&lt;main&gt;<span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Есть несколько путей решения этой проблемы.</p>

<h3>Решение 0 - Внести название модуля в название класса</h3>

<p>Я до конца не понимаю почему, но вот если изменить код модели
<code>List::Item</code> на следующий:</p>

<p><figure class='code'><figcaption><span>Листинг 4 - Решение 0 для модели List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span><span class="o">::</span><span class="no">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>то все рабоет нормально:</p>

<p><figure class='code'><figcaption><span>Листинг 5 - Результат решения 0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;List::Item id: nil, created_at: nil, updated_at: nil&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Решение 1 - Заменить module на класс</h3>

<p>Изучая объектную модель ruby мы обнаружили одну интересную вещь: класс -
это тот же модуль, но с дополнительным функционалом!</p>

<p><figure class='code'><figcaption><span>Листинг 6 - Отношения Class и Module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="no">List</span><span class="o">::</span><span class="no">Item</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="no">List</span><span class="o">::</span><span class="no">Item</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Module</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Значит <code>Class</code> наследует весь функционал <code>Module</code> и он также может
выступать как контейнер. Давайте попробуем это.</p>

<p><figure class='code'><figcaption><span>Листинг 7 - Решение 1 для модели List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>И правда - все работает отлично:</p>

<p><figure class='code'><figcaption><span>Листинг 8 - Результат решения 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;List::Item id: nil, created_at: nil, updated_at: nil&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Решение 2 - К черту всю эту возню с объектной моделью!</h3>

<p>В данном случае предлагается поступить следующим образом: выделить
namespace и ложить туда все модели, которые логически связаны. В
соответствии с нашим примером будет следующее:</p>

<p><figure class='code'><figcaption><span>Листинг 9 - Модель Lists::List app/models/lists/list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Lists</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">List</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Листинг 10 - Модель Lists::Item app/models/lists/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Lists</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Однозначным плюсом данного подхода является то, что все модели лежат в
одной папке и если вам нужно выпилить данный кусок функционала, то вот
оно все в папке лежит - не нужно шарится среди несколько десятков
моделей в папке <code>app/models</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby с функциональным блеском]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/01/02/ruby-s-funktsional'nym-blieskom/"/>
    <updated>2015-01-02T17:20:26+02:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/01/02/ruby-s-funktsional&#8217;nym-blieskom</id>
    <content type="html"><![CDATA[<p>Вот и наступил 2015 год. Подводя итоги прошлого года можно отметить две
мэйнстримовые тенденции:</p>

<ol>
<li>Статическая типизация</li>
<li>Функциональное программирование</li>
</ol>


<p>Сегодня пойдет речь о втором пункте.</p>

<h3>Год перемен</h3>

<p>2014 год однозначно был функциональным. Вторую жизнь получили многие
забытые функциональные языки, много новых появилось. Их начинали пихать
куда можно и куда нельзя, где уместно их использовать, а где нет. Меня
тоже немного задела эта волна. Совершенно случайно необходимо было
написать слой приложения на любом языке кроме ruby. Задача выбора языка
сейчас очень сложна из-за их огромного выбора. Но не на этот раз! Все
больше и больше информации появлялось о новом молодом языке <strong>elixir</strong>.
Он привлекал еще больше внимания, т.к. его создатель - Rails Core Team
Member (Jose Valim)!. И как раз вышла стабильная версия 1.0.0! И он как
раз еще и функциональный язык! <strong>Бинго!</strong> Как раз есть возможность
окунуться в мир ФП на реальном примере! Работка обещала быть интересной
:-)</p>

<h3>Другой мир</h3>

<p>На первый взгляд все казалось намного проще. Но в самом начале был
тупик&hellip; ООПшный тупик&hellip; Нет классов и, соответственно, нет
наследования и всех плюшек ООП. Есть только функции и их можно
объединять в модули и все. Совсем другой мир! Но не менее интересный) Но
я не буду полностью все описывать, а остановлюсь на нескольких, как мне
кажется, особо интересных особенностях.</p>

<h3>Трансформация данных</h3>

<p>Для тех, кто хочет познакомится с elixir и функциональным
программированием, обязательно стоит посмотреть доклад Дейва Томаса
(Dave Thomas) <a href="https://www.youtube.com/watch?v=KQwEmdOH-GM">Elixir: Power of Erlang, Joy of Ruby</a>.
Основная идея, которую я подчерпнул из данного доклада - трансформация данных.
Т.е., рассматривая какую-либо часть архитектуры как черный ящик, то на
вход подается <code>данные_1</code>, а на выходе мы ожидаем <code>данные_2</code>. Я думаю,
что это применимо и к ОПП подходу, но в ФП это более выражено и есть
даже специальный оператор!</p>

<h3>Pipe-оператор</h3>

<p>В elixir есть специальный оператор <code>|&gt;</code>, который называется
pipe-оператор, который выполняет операции над данными слева. Например:</p>

<p><figure class='code'><figcaption><span>Листинг 1 - Пример использования pipe-оператора </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">str</span> <span class="p">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>   <span class="n">sergey</span>     <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="o">|&gt;</span> <span class="nc">String</span><span class="p">.</span><span class="n">strip</span> <span class="c1"># =&gt; &amp;ldquo;sergey&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Причем количество операций преобразования может быть несколько</p>

<p><figure class='code'><figcaption><span>Листинг 2 - Пример комбинирования операций преобразования через pipe-оператор </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">str</span> <span class="p">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>   <span class="n">sergey</span>     <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="o">|&gt;</span> <span class="nc">String</span><span class="p">.</span><span class="n">strip</span> <span class="o">|&gt;</span> <span class="nc">String</span><span class="p">.</span><span class="n">capitalize</span> <span class="c1"># =&gt; &amp;ldquo;Sergey&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Это очень напоминает оператор <code>|</code>, используемый в bash.</p>

<h3>А что в ruby?</h3>

<p>Ruby полностью объектно-ориентированный язык, поэтому в основе лежат
объекты и связь между объектами с помощью сообщений. Но сколько же раз
вы видели подобный код:</p>

<p><figure class='code'><figcaption><span>Листинг 3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch_name</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class='line'>  <span class="n">normalize_name</span><span class="p">(</span><span class="n">strip_html</span><span class="p">(</span><span class="n">html</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Меня всегда он вводит в конфуз, т.к. с первого взгляда сложно
понять, где входные данные, а где список операций обработки.</p>

<p>Давайте попробуем реализовать подобное в ruby. Мы будем использовать здесь
<em>monckeypatching</em> (начиная с ruby 2.0 необходимо использовать
<em>refinements</em>)!</p>

<p><figure class='code'><figcaption><span>Листинг 4 - Monckeypatching </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">strip_html</span>
</span><span class='line'>    <span class="c1"># some code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">normalize_name</span>
</span><span class='line'>    <span class="c1"># some code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def fetch_name(html)</span>
</span><span class='line'><span class="sr">  html.strip_html.normalize_name</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Вот чем вам не код, как в листинге 2? В отличии от листинга 3, здесь код
намного понятен с первого взгляда, т.к. сразу можно понять: слева
объект, над которым производятся трансформации, а далее идут операции.
Стоит отметить, что в данном примере все операции производятся над типом <code>String</code>.
Если в цепочке обработки используются несколько типов данных, то необходимо патчить
все соответствующие классы.</p>

<h3>А как же коллекции?</h3>

<p>Pipe-оператор также отлично справляется и с коллекциями. Вот, например,
код, который увеличивает каждый элемент в массиве на <em>1</em>:</p>

<p><figure class='code'><figcaption><span>Листинг 5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Transform</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">increment</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">el</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arr</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">arr</span> <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nc">Transform</span><span class="p">.</span><span class="n">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">1</span><span class="p">))</span> <span class="c1">#=&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Или даже лучше так:</p>

<p><figure class='code'><figcaption><span>Листинг 6 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Transform</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">increment</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">el</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">def</span> <span class="n">process_element</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">el</span> <span class="o">|&gt;</span> <span class="n">increment</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">arr</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">arr</span> <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nc">Transform</span><span class="p">.</span><span class="n">process_element</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">1</span><span class="p">))</span> <span class="c1">#=&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>В ruby это выглядело бы следующим образом:</p>

<p><figure class='code'><figcaption><span>Листинг 7 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process_element</span><span class="p">(</span><span class="n">el</span><span class="p">)</span>
</span><span class='line'>  <span class="n">el</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;arr = [1, 2, 3]</span>
</span><span class='line'><span class="sr">arr.map { |e| process_element(e) } # =&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Или в стиле elixir&#8217;a (для этого будем использовать магический метод
<code>Kernel#method</code>):</p>

<p><figure class='code'><figcaption><span>Листинг 8 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process_element</span><span class="p">(</span><span class="n">el</span><span class="p">)</span>
</span><span class='line'>  <span class="n">el</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;arr = [1, 2, 3]</span>
</span><span class='line'><span class="sr">arr.map &amp;amp;method(:process_element) # =&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Что в итоге?</h3>

<p>Я очень люблю ruby! Каждый день для себя открываю все больше и больше
возможностей и не перестаю восхищатся его мощью и выразительностью. Но
всегда не покидает чувство, что чего-то не хватает и ты находишь это в
другом языке и пытаешься реализовать в ruby. Кто знает, возможно лет
через N это запилят и в ruby :-)</p>

<h4>Спасибо за внимание!</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пример TDD разработки библиотеки на Ruby]]></title>
    <link href="http://alterego-labs.github.io/blog/2014/12/18/primier-tdd-razrabotki-bibliotieki-na-ruby/"/>
    <updated>2014-12-18T20:06:30+02:00</updated>
    <id>http://alterego-labs.github.io/blog/2014/12/18/primier-tdd-razrabotki-bibliotieki-na-ruby</id>
    <content type="html"><![CDATA[<h3>Лирическое отступление</h3>

<p>Приходит время, когда просто сидеть на работе и как робот выполнять
таски по трекеру становится скучно и не интересно. И в этот момент
просыпается необходимость разнообразить свою профессиональную жизнь.
Самое первое, что можно придумать - это вести блог. Так что прошу не
сильно закидывать шишками, т.к. это мой первый подобный пост.</p>

<p><strong>Lets go!</strong></p>

<h3>Задача</h3>

<p>Сколько людей - столько и мнений. Наверное сейчас очень сложно придумать
такую задачу, чтобы она была уникальной. Поэтому появилось устоявшееся
выражение - <em>писать велосипед</em>. Вот таким велосипедом я сейчас и займусь
(я даже специально не гуглил на эту тему, чтобы заранее себя не
расстраивать). А проблема вот какая:</p>

<blockquote><p>Последнее время очень часто возникает необходимость сливать базу
данных с продакшена и накатывать ее на девелопменте, т.к. править
различные штуки удобнее локально. Для этого приходится делать
достаточно много шагов: зайти по ssh и сделать дамп базы, зайти через
Filezilla и скачать этот дамп, затем накатить его на dev базу. И тут я
задался вопросом ведь <strong>яжпрограммист</strong> или кто?!</p></blockquote>

<p>Поэтому я решил написать на ruby утилиту, которая поможет мне
автоматизировать этот процесс.</p>

<blockquote><p>Я понимаю, что это велосипед, но ведь он свой :-)</p></blockquote>

<h3>Цель</h3>

<p>С самого начала я взял листок бумаги и накидал кусок кода, который,
возможно, должен получится в конце. Можно сказать своеобразный <em>DSL</em>,
при помощи которого я смог бы описывать <em>шаги</em>, которые я делал вручную.
Получилось что-то такое:</p>

<p><figure class='code'><figcaption><span>Листинг 1 - Идея </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DbFetcher</span><span class="o">.</span><span class="n">steps</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">step</span> <span class="ss">ssh_login</span><span class="p">:</span> <span class="p">{</span> <span class="ss">host</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">some</span><span class="o">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">username</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">password</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">password</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">step</span> <span class="ss">ssh_run</span><span class="p">:</span> <span class="p">{</span> <span class="ss">command</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">step</span> <span class="n">s</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;ftp:&quot;</span><span class="o">&gt;</span><span class="ss">ftp</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/a&gt; { serverpath: &amp;lsquo;&amp;hellip;&amp;rsquo;, localpath: &amp;lsquo;&amp;hellip;&amp;rsquo; }</span>
</span><span class='line'><span class="sr">  step local_run: { command: &amp;lsquo;&amp;hellip;&amp;rsquo; }</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Сразу хочу отметить тот факт, что конечный результат может и даже,
скорее всего, <em>будет</em> отличаться от кода выше.</p>

<h3>Будем пробовать TDD</h3>

<p>Есть многие вещи, которые ты не поймешь зачем они нужны, пока ты сам до
этого не дойдешь, даже если какой-нибудь гуру будет тебе говорить, что это классно.
Такая история и с <em>TDD</em>. Сама идея писать код для проверки кода звучит
дико, не правда ли? Но не нужно смотреть на TDD только через призму,
того что нужно писать дополнительный код, ведь программисты и так
ленивые. Это целая методология со своими условными <strong>&lsquo;правилами&rsquo;</strong> и ее
главная цель уменьшить вашу головную боль. Но не буду заострять внимание
на этом. Просто будте готовы писать тесты!</p>

<h3>Ну-с начнем</h3>

<p>Самый сложный момент. С чего начать, когда есть только идея? Существуют
два варианта движения:</p>

<ol>
<li>Inside-out</li>
<li>Outside-in</li>
</ol>


<p>Выбор зависит индивидуально от программиста (смотря как у кого работает
голова), а также от того, какую информацию содержит ваша первоначальная
идея (листинг 1).</p>

<p>Давайте еще раз посмотрим, что у нас есть - это пример <em>АПИ</em>, которое
должна предоставлять библиотека или, другими словами, ее <em>outside</em>
часть. Для нас очевиден путь (по крайней мере я выбрал этот вариант и
возможно к концу написания библиотеки пойму, что он был неудобный)
<strong>outside-in</strong>.</p>

<h3>Первые шаги</h3>

<p>С самого начала хочу определить структуру каталога, чтобы была
возможность ссылаться на нее, а также вам для наглядности:</p>

<pre><code>&lt;project_root&gt;
|- lib
|- test
</code></pre>

<p>Я думаю тут вопросов не должно возникнуть)</p>

<p>В первую очередь давайте настроем наше test environment. Надеюсь вы
заметили, что я ни слова не сказал насчет какого-нибудь фреймворка? Да,
вы правильно поняли - это будет проект на чистом ruby. Поэтому любые
настройки придется делать вручную. Но это даже к лучшему! Так вот, если
взять <em>rails</em>, то там уже из коробки идет настроенный unit testing, но я
всегда сразу устанавливал <em>Rspec</em>, и файл с настройками назывался
<strong>test_helper</strong> или <strong>spec_helper</strong> (для rspec). Давайте и у нас
создадим такой файл, в котором будут содержаться общие настройки для
всех наших тестов:</p>

<p><figure class='code'><figcaption><span>Листинг 2 - test/test_helper.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">minitest</span><span class="o">/</span><span class="n">autorun</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Dir[File.dirname(&lt;strong&gt;FILE&lt;/s</span><span class="n">trong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/.</span><span class="n">.</span><span class="o">/</span><span class="n">lib</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*/&lt;</span><span class="sr">/em&gt;.rb&amp;rsquo;].each do |file|</span>
</span><span class='line'><span class="sr">  require file</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Что мы здесь сделали?</p>

<ol>
<li>Подключили фреймворк для unit тестирования - Minitest, который идет в
ruby stdlib</li>
<li>Загрузили все файлы из папки <strong>lib</strong></li>
</ol>


<p>И вот теперь, наконец-то, можно приступать к написанию кода! А если
точнее - теста. Вот тут начинается еще одна интересная вещь - а что
тестировать, если ничего нет?</p>

<p>Небольшое отступление. Сейчас мне в голову пришла мысль и я хочу немного
изменить и дополнить нашу первоначальную идею:</p>

<p><figure class='code'><figcaption><span>Листинг 3 - Идея измененная </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">runner</span> <span class="o">=</span> <span class="no">DbFetcher</span><span class="o">.</span><span class="n">define_runner</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">step</span> <span class="ss">ssh_login</span><span class="p">:</span> <span class="p">{</span> <span class="ss">host</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">some</span><span class="o">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">username</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">password</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">password</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">step</span> <span class="ss">ssh_run</span><span class="p">:</span> <span class="p">{</span> <span class="ss">command</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">step</span> <span class="n">s</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;ftp:&quot;</span><span class="o">&gt;</span><span class="ss">ftp</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/a&gt; { serverpath: &amp;lsquo;&amp;hellip;&amp;rsquo;, localpath: &amp;lsquo;&amp;hellip;&amp;rsquo; }</span>
</span><span class='line'><span class="sr">  step local_run: { command: &amp;lsquo;&amp;hellip;&amp;rsquo; }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">runner.run</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>И теперь стало немного понятнее с чего нам начать. Как я уже говорил
выше я выбрал путь outside-in, т.е. мы будем двигаться в сторону
уточнения внутренней реализации. Поэтому начнем с теста внешнего АПИ.
Да, я не опечатался - начнем с <strong>ТЕСТА</strong>)</p>

<p><figure class='code'><figcaption><span>Листинг 4 - Первая проба написания теста test/lib/db_fetcher_test.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">test_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class DbFetcherTest &amp;lt; Minitest::Test</span>
</span><span class='line'><span class="sr">  def test_define_new_runner</span>
</span><span class='line'><span class="sr">    assert_instance_of DbFetcher::Runner, DbFetcher.define_runner {}</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Сейчас давайте разберем листинг 4:</p>

<ol>
<li>Мы заинклудили наш test_helper, поэтому в данном контексте доступен
Minitest</li>
<li>Написали тест, который проверяет правильно работы метода
<code>define_runner</code> (здесь лучше сказать, что мы проверяем не
правильность, а то, какой результат ожидаем после вызова данного
метода). Все, что мы можем сейчас проверить - метод <code>define_runner</code>
возвращает новый экземпляр класса <code>DbFetcher::Runner</code>.</li>
</ol>


<p>А давайте запустим наш тест и посмотрим результат? (подсказка: для
запуска теста набирайте <code>ruby test/lib/db_fetcher_test.rb</code>):</p>

<pre><code>Run options: --seed 60105

# Running:

E

Finished in 0.001982s, 504.5409 runs/s, 0.0000 assertions/s.

  1) Error:
DbFetcherTest#test_define_new_runner:
NameError: uninitialized constant DbFetcherTest::DbFetcher
    test/lib/db_fetcher_test.rb:10:in `test_define_new_runner'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
</code></pre>

<p>Упс&hellip; Но все правильно! Ведь кода у нас еще нет! Сейчас мы должны
написать минимум кода для того, чтобы удовлетворить данный тест.</p>

<p><figure class='code'><figcaption><span>Листинг 5 - lib/db_fetcher.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DbFetcher</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def define_runner(&amp;amp;block)</span>
</span><span class='line'><span class="sr">    Runner.new</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Так-с&hellip; Попытка следующая:</p>

<pre><code>Run options: --seed 17668

# Running:

E

Finished in 0.001540s, 649.3506 runs/s, 0.0000 assertions/s.

  1) Error:
DbFetcherTest#test_define_new_runner:
NameError: uninitialized constant DbFetcher::Runner
    test/lib/db_fetcher_test.rb:10:in `test_define_new_runner'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
</code></pre>

<p>Вот черт! Совсем забыл про <code>Runner</code>. Давайте определим и его!</p>

<p><figure class='code'><figcaption><span>Листинг 6 - lib/db_fetcher/runner.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DbFetcher</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Runner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>А вот теперь скрестили пальцы и-и-и-и:</p>

<pre><code>Run options: --seed 57197

# Running:

.

Finished in 0.001258s, 794.9126 runs/s, 794.9126 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Отлично! <code>1 assertions</code> значит, что наш тест прошел! Фууух.</p>

<h3>Итерационность</h3>

<p>Главное слово в этом процессе - <strong>итерационность</strong>. После того, как вы
добились чтобы тест прошел, можете писать тест дальше. Затем вы опять
пишете код, удовлетворяющий новые тесты, но и не сломал предыдущие! И
этот процесс повторяется снова и снова. Самой главной величиной этого
процесса является размер вот этого шага или количество логики,
заложенной в тесте, после написания которого вы приступаете к написанию
кода. Здесь нет никаких пожеланий и вступает в силу индивидуальность
разработчика. Каждый выбирает этот шаг так, чтобы было комфортно: если
напишите много тестов - зациклитесь на написании кода, а также есть
вероятность сделать тесты неактуальными, т.к. при их написании не учли
каких-либо архитектурных моментов; если напишите мало - то придется
слишком часто переключать ваш контекст между кодом и тестами, что тоже
не гуд, т.к. опять же можно что-то упустить.</p>

<h3>Продолжим?</h3>

<p>Спешу вас разочаровать(а может и обрадовать) - я не буду полностью
описывать весь процесс разработки данной библиотеки, т.к. это будет
слишком много неинтересного текста и чередующихся листингов
тесты-код-тесты-код-тесты&hellip; и т.д. Поэтому я предлагаю мне дописать
библиотеку и затем я выложу исходники на github, и затем кину сюда
ссылку, хорошо?) Ну и отлично!</p>

<h4>Спасибо за внимание!</h4>

<p><strong>UPDATE</strong>. Как и обещал, выкладываю ссылку на репозитарий
<a href="https://github.com/alterego-labs/db_fetcher">db_fetcher</a>. Библиотека
еще будет дорабатываться, но базовые концепции уже реализованы и
протестированы.</p>
]]></content>
  </entry>
  
</feed>
