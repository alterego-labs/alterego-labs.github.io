<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metaprogramming | AlterEGO Labs official blog]]></title>
  <link href="http://alterego-labs.github.io/blog/categories/metaprogramming/atom.xml" rel="self"/>
  <link href="http://alterego-labs.github.io/"/>
  <updated>2015-11-14T11:40:20+02:00</updated>
  <id>http://alterego-labs.github.io/</id>
  <author>
    <name><![CDATA[AlterEGO Labs]]></name>
    <email><![CDATA[alteregolabs@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby метапрограмминг и наследование]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/05/25/ruby-mietaproghrammingh-i-nasliedovaniie/"/>
    <updated>2015-05-25T11:23:10+03:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/05/25/ruby-mietaproghrammingh-i-nasliedovaniie</id>
    <content type="html"><![CDATA[<p>Ruby не перестает меня удивлять! Как по мне, то самое удивительное и
мощное в нем - метапрограмминг. После статического языка, в котором твой
арсенал ограничен заложенными ключевыми словами и конструкциями, просто
невозможно вообразить насколько развязаны твои руки и что ты можешь со
всем этим делать! Используя динамику и выразительность Ruby можно
превратить кусок кода практически в понятную фразу на английском.</p>

<p>Элементы конструкций не ограничены! Можно создавать их самому сколько
угодно, получая в результате высокоуровневый и понятный почти любому
человеку DSL.</p>

<p>Самое главное вовремя остановится&hellip; Но не сейчас)</p>

<h3>Варианты объявления класса</h3>

<p>Все мы привыкли объявлять наши классы используя элемент синтаксиса ruby,
а именно ключевое слово <strong>class</strong>:</p>

<pre><code class="ruby">class User
end
</code></pre>

<p>Но существует еще один вариант. Т.к. класс является экземпляром класса
Class, то справедлива следующая запись:</p>

<pre><code class="ruby">User = Class.new do
  attr_accessor :name
end
</code></pre>

<p>Используя способ выше также можно указать суперкласс, просто передав его
как параметр в метод <code>Class.new</code>:</p>

<pre><code class="ruby">class User
end

RegisteredUser = Class.new(User) do
end

RegisteredUser.ancestors # =&gt; [RegisteredUser, User, Object, Kernel, BasicObject]
</code></pre>

<p><strong>Но есть одна интересная особенность!</strong></p>

<p>Когда вы несколько раз объявляете класс используя ключевое слово <em>class</em>, то реально
класс инициализируется только один раз. Все следующие разы класс
<strong>открывается</strong> для внесения изменений. Например:</p>

<pre><code class="ruby">class User
end

User.object_id # =&gt; 70299452133440

User.new.name # =&gt; NoMethodError: undefined method `name' for #&lt;User:0x007fd35b40a930&gt;

class User
  def name
    'Sergey'
  end
end

User.obect_id # =&gt; 70299452133440

User.new.name # =&gt; Sergey
</code></pre>

<p>В случае с объявлением класса, используя метод <code>Class.new</code>, ситуация
немного другая. На самом деле слово <code>User</code>, которое мы используем для
инициализации экземпляров, является практически такой же переменной,
которая ссылается на экземпляр класса <code>Class</code>. Поэтому код ниже дает,
может быть, вполне очевидные результаты:</p>

<pre><code class="ruby">class User
  def name
    'Sergey'
  end
end

User.object_id # =&gt; 70162158343080

User.new.name # =&gt; Sergey

User = Class.new do
  def second_name
    'Gernyak'
  end

  def full_name
    "#{second_name} #{name}"
  end
end

User.object_id #=&gt; 70162144228540

User.new.full_name # =&gt; NameError: undefined local variable or method `name' for #&lt;User:0x007fdb3b028b18&gt;

User.new.second_name # =&gt; Gernyak
</code></pre>

<p>Получается мы взяли и заменили значение нашей переменной <code>User</code> на
другое. Об этом также свидетельствует значение <code>object_id</code>. Поэтому наш
новый класс <code>User</code> ничего не знает о методе <code>#name</code>.</p>

<p>Правда и тут можно сделать хитрость: добавить наш существующий класс в
цепочку наследования:</p>

<pre><code class="ruby">class User
  def first_name
    'Sergey'
  end
end

User.new.name # =&gt; Sergey

User = Class.new(User) do # &lt;= Вот сюда
  def second_name
    'Gernyak'
  end

  def full_name
    "#{second_name} #{first_name}"
  end
end

User.new.full_name # =&gt; Gernyak Sergey

User.ancestors # =&gt; [User, User, Object, Kernel, BasicObject]
</code></pre>

<h3>Немного магии</h3>

<p>А почему бы не объявить динамически класс, как суперкласс для другого
класса?</p>

<pre><code class="ruby">class User &lt; Class.new
end

User.ancestors # =&gt; [User, #&lt;Class:0x007fd241dae998&gt;, Object, Kernel, BasicObject]
</code></pre>

<p>Данную фичу я использовал в одной из наших библиотек <a href="https://github.com/alterego-labs/extracted_validator">exracted_validator</a>.</p>

<p>У меня есть некоторый базовый класс, который содержит общую логику для
возможности вынесения валидаций из модели:</p>

<pre><code class="ruby">module ExtractedValidator
  class Base &lt; SimpleDelegator
    # Some logic here
  end
end
</code></pre>

<p>Но с некоторыми видами валидаций могут возникнуть проблемы, т.к. они
жестко завязаны на именование класса, в котором они объявлены. Например,
валидация <strong>uniqueness</strong>. Для того, чтобы иметь возможность использовать
такую валидацию в кастомном валидаторе, необходимо переопределить метод
<code>.model_class</code>:</p>

<pre><code class="ruby">class SignUpUserValidator &lt; ExtractedValidator::Base
  def self.model_class
    User
  end
end
</code></pre>

<p>Используя последний код, все будет работать как и ожидается и все
останутся довольны.</p>

<p>Ну почти все&hellip; Я не доволен тем, что мне принудительно нужно добавлять
еще один метод каждый раз, когда буду объявлять новый валидатор. Поэтому
я решил сделать небольшой рефакторинг используя метапрограмминг :-)</p>

<p>И вот что получилось:</p>

<pre><code class="ruby">module ExtractedValidator
  class Base &lt; SimpleDelegator
    def self.[](model)
      Class.new(self) do
        define_singleton_method :model_class do
          model
        end
      end
    end
  end
end

class SignUpUserValidator &lt; ExtractedValidator::Base[User]
end
</code></pre>

<p>В данном примере динамически создается класс-обертка, в котором
объявляется требуемый метод <code>.model_class</code> и этот метод возвращает
переданный класс, целевой для данного валидатора, модели. Цепочка
наследования может выглядеть следующим образом:</p>

<pre><code class="ruby">SignUpUserValidator.ancestors # =&gt; [SignUpUserValidator, #&lt;Class:0x007f8ec9b604b8&gt;, ExtractedValidator::Base, SimpleDelegator, Delegator, #&lt;Module:0x007f8ec9c1a138&gt;, BasicObject]
</code></pre>

<p>Вот <code>#&lt;Class:0x007f8ec9b604b8&gt;</code> как раз и есть тот самый класс-обертка!</p>

<p>На этом у меня все. <strong>Спасибо за внимание!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Коллизия имен класса и модуля в Ruby]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/03/15/kolliziia-imien-klassa-i-modulia-v-ruby/"/>
    <updated>2015-03-15T09:33:25+02:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/03/15/kolliziia-imien-klassa-i-modulia-v-ruby</id>
    <content type="html"><![CDATA[<h3>Вот такая вот ситуация</h3>

<p>В основе статьи лежит ситуация, с которой я и мои коллеги столкнулись
при работе над одним проектом.</p>

<p>Представим себе следующее. У меня есть модель <code>Item</code>:</p>

<p><figure class='code'><figcaption><span>Листинг 0 - Модель Item app/models/item.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Затем нам дали задачу на новую фичу: пользователи могут создавать списки
и добавлять туда элементы. Мы сразу видим модель <code>List</code>:</p>

<p><figure class='code'><figcaption><span>Листинг 1 - Модель List app/models/list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Но для хранения связи между элементом и листом мы решили использовать модель
не <code>ListItem</code>, а положить ее в namespace <code>List</code>, т.е. логически
выделить эту часть подсистемы, т.к. мы предполагаем, что будут еще связанные модели.
И получается следующее:</p>

<p><figure class='code'><figcaption><span>Листинг 2 - Модель List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">List</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Как бы все идет хорошо до тех пор, пока вы не захотите использовать
<code>List::Item</code> модель где-нибудь в коде приложения:</p>

<p><figure class='code'><figcaption><span>Листинг 3 - Использование List::Item в rails console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Loading development environment <span class="o">(</span>Rails 4.0.4<span class="o">)</span>
</span><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'>TypeError: List is not a module
</span><span class='line'>    from /Users/sergio/Work/railsapps/namespace_collision_demo/app/models/list/item.rb:1:in &lt;code&gt;<span class="p">&amp;</span>lt<span class="p">;</span>top <span class="o">(</span>required<span class="o">)</span><span class="p">&amp;</span>gt<span class="p">;</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:424:in&lt;/code&gt;load&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:424:in &lt;code&gt;block in load_file<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:616:in&lt;/code&gt;new_constants_in&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:423:in &lt;code&gt;load_file<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:324:in&lt;/code&gt;require_or_load&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:463:in &lt;code&gt;load_missing_constant<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/activesupport-4.0.4/lib/active_support/dependencies.rb:184:in&lt;/code&gt;const_missing&#39;</span>
</span><span class='line'>    from <span class="o">(</span>irb<span class="o">)</span>:1
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands/console.rb:90:in &lt;code&gt;start<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands/console.rb:9:in&lt;/code&gt;start&#39;</span>
</span><span class='line'>    from /Users/sergio/.rvm/gems/ruby-2.1.2/gems/railties-4.0.4/lib/rails/commands.rb:62:in &lt;code&gt;<span class="p">&amp;</span>lt<span class="p">;</span>top <span class="o">(</span>required<span class="o">)</span><span class="p">&amp;</span>gt<span class="p">;</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from bin/rails:4:in&lt;/code&gt;require&#39;</span>
</span><span class='line'>    from bin/rails:4:in <span class="sb">`</span>&lt;main&gt;<span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Есть несколько путей решения этой проблемы.</p>

<h3>Решение 0 - Внести название модуля в название класса</h3>

<p>Я до конца не понимаю почему, но вот если изменить код модели
<code>List::Item</code> на следующий:</p>

<p><figure class='code'><figcaption><span>Листинг 4 - Решение 0 для модели List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span><span class="o">::</span><span class="no">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>то все рабоет нормально:</p>

<p><figure class='code'><figcaption><span>Листинг 5 - Результат решения 0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;List::Item id: nil, created_at: nil, updated_at: nil&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Решение 1 - Заменить module на класс</h3>

<p>Изучая объектную модель ruby мы обнаружили одну интересную вещь: класс -
это тот же модуль, но с дополнительным функционалом!</p>

<p><figure class='code'><figcaption><span>Листинг 6 - Отношения Class и Module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="no">List</span><span class="o">::</span><span class="no">Item</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="no">List</span><span class="o">::</span><span class="no">Item</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Module</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Значит <code>Class</code> наследует весь функционал <code>Module</code> и он также может
выступать как контейнер. Давайте попробуем это.</p>

<p><figure class='code'><figcaption><span>Листинг 7 - Решение 1 для модели List::Item app/models/list/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>И правда - все работает отлично:</p>

<p><figure class='code'><figcaption><span>Листинг 8 - Результат решения 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2.1.2 :001 &gt; List::Item.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;List::Item id: nil, created_at: nil, updated_at: nil&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Решение 2 - К черту всю эту возню с объектной моделью!</h3>

<p>В данном случае предлагается поступить следующим образом: выделить
namespace и ложить туда все модели, которые логически связаны. В
соответствии с нашим примером будет следующее:</p>

<p><figure class='code'><figcaption><span>Листинг 9 - Модель Lists::List app/models/lists/list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Lists</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">List</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Листинг 10 - Модель Lists::Item app/models/lists/item.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Lists</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Однозначным плюсом данного подхода является то, что все модели лежат в
одной папке и если вам нужно выпилить данный кусок функционала, то вот
оно все в папке лежит - не нужно шарится среди несколько десятков
моделей в папке <code>app/models</code>.</p>
]]></content>
  </entry>
  
</feed>
