<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mvc | AlterEGO Labs official blog]]></title>
  <link href="http://alterego-labs.github.io/blog/categories/mvc/atom.xml" rel="self"/>
  <link href="http://alterego-labs.github.io/"/>
  <updated>2015-05-28T02:13:39+03:00</updated>
  <id>http://alterego-labs.github.io/</id>
  <author>
    <name><![CDATA[AlterEGO Labs]]></name>
    <email><![CDATA[alteregolabs@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Первые впечатления от Phoenix Framework]]></title>
    <link href="http://alterego-labs.github.io/blog/2015/04/30/piervyie-vpiechatlieniia-ot-phoenix-framework/"/>
    <updated>2015-04-30T12:56:38+03:00</updated>
    <id>http://alterego-labs.github.io/blog/2015/04/30/piervyie-vpiechatlieniia-ot-phoenix-framework</id>
    <content type="html"><![CDATA[<h3>Язык</h3>

<p>Фреймворк - это логическое упорядочивание кода, которое реализует
определенную идею, а также набор вспомогательных средств для удобной
разработки программных продуктов. Но главную роль для фреймворка, в том
числе того, что он может позволить для разработчика, является язык
программирования, на котором он написан.</p>

<p>Phoenix Framework написан на языке <em>elixir</em>. В сущности своей язык
является &ldquo;синтаксическим сахаром&rdquo; для другого известного ЯП <em>erlang</em>. Но
самое главное в нем то, что он написан рубистом (<em>Jose Valim</em>) и смотря
на код <em>elixir</em> нельзя не заметить насколько велико влияние <em>ruby</em> на
<em>elixir</em>. Но некоторое сходство можно найти только в синтаксисе. Все
остальное - структуры данных, управляющие блоки - все здесь по другому.
Основное, что нужно помнить про <em>elixir</em> - это <strong>функциональный язык
программирования</strong>! Это значит никаких объектов! Но, как оказалось, и
без них можно обойтись.</p>

<h3>Структура фреймворка</h3>

<p>Phoenix является MVC фреймворком. Структурирование очень напонимает
рельсы:</p>

<ul>
<li><em>web/controllers</em> - здесь находятся контроллеры;</li>
<li><em>web/models</em> - здесь находятся модели;</li>
<li><em>web/views</em> - здесь находятся вьюхи.</li>
</ul>


<p>Но если вы зайдете в <em>web/views</em>, то не найдете там ни одного темплейта.
Здесь начинается интересная особенность phoenix.</p>

<p>Для шаблонов имеется другое место в фреймворке - <em>web/templates</em>. А что
же тогда <em>views</em>? Оказывается views - это не то, что мы привыкли видеть
в рельсах. В Phoenix Framework <em>views</em> выполняют следующие функции (по
крайней мере то, что мне удалось выяснить на данный момент):</p>

<ul>
<li>рендеринг темплейтов. В рельсах рендерингом теплейтов занимается
контроллер. Здесь данная функциональность вынесена в отдельный класс. И,
на мой взгляд, это очень интересное решение, т.к. в рельсах нельзя было,
кроме контроллера, отрендерить темплейт;</li>
<li>содержит набор вспомогательных функций, которые можно использовать в
темплейтах. В рельсах для этого создавались так называемые <em>helpers</em>.</li>
</ul>


<h3>Доступ к данным</h3>

<p>Есть несколько вариантов того, где хранить данные:</p>

<ul>
<li>использовать БД <em>mnesia</em>, которая написанная на erlang и является
родной для <em>elixir</em> также;</li>
<li>использовать аналог ActiveRecord, который называется <em>Ecto</em>. На данный
момент есть адаптеры для <em>postgresql</em> и <em>mysql</em>. ActiveRecord эта
библиотека, конечно, мало напоминает, но она сразу идет из коробки и
является, таким себе, стандартным решением.</li>
</ul>


<p><em>Ecto</em> поддерживает практически весь необходимый функционал по работе с
данным, которым мы привыкли пользоваться в рельсах:</p>

<ul>
<li>создание БД с помощью специального <em>mix</em> таска;</li>
<li>создание моделей;</li>
<li>генерирование миграций;</li>
<li>ассоциации;</li>
<li>валидации;</li>
<li>CRUD операции и т.д.</li>
</ul>


<h3>Ассеты</h3>

<p>Из коробки компиляция ассетов происходит с помощью <em>nodejs</em> пакета
<em>brunch</em>. Т.е. если вы хотите писать ассеты на coffeescript и sass, то
нужно также ставить <em>nodejs</em>. При деплое на продакшн необходимо
принудительно выполнять специальную команду для прекомпиляции. На первый
взгляд все понятно и прозрачно, еще не успел наспотыкаться)</p>

<p><blockquote><p>На момент написания статьи вышла новая версия Phoenix Framework 0.12.0. В ней появился новый mix таск для прекомпиляции ассетов, наподобие, <code>rake assets:precompile</code> в rails.</p></blockquote></p>

<h3>Разработка</h3>

<p>В процессе разработке я не заметил каких-то значимых особенностей. Очень
похожая инфраструктура с рельсами:</p>

<ul>
<li>есть свой пакетный менеджер;</li>
<li>большое количество библиотек, плагинов;</li>
<li>есть свой аналог rake тасков - <em>mix</em>;</li>
<li>генерирование приложения с помощью mix таска;</li>
<li>различные scaffold генераторы;</li>
<li>есть свой аналог Gemfile&#8217;а - <em>mix.exs</em>.</li>
</ul>


<p>В общем с точки зрения рельсовика все довольно похоже. Команды только
называются по другому, но семантически они выполняют теже действия.</p>

<h3>Деплой</h3>

<p>Очень важным шагом является деплой своего приложения на продакшн.
Инфраструктура rails немного разбаловала нас, что деплой можно делать
всего одной командой. Хотя начальная настройка бывает затяжной. А также
разгребание после очередного деплоя тоже :-) Но все же все понятно и
очевидно. В официальной документации нет целостной картины, что из себя
представляет деплой phoenix приложения и как его готовить.</p>

<p>Я столкнулся с множеством интересных моментов, когда пытался залить
приложение на сервер, но все же через несколько часов попыток все
заработало. На самом деле проблемы связаны даже не с самим фреймворком,
а с незнанием, что делать с языком и его окружением - <em>erlang</em> и его
виртуальной машиной. Для людей знающих все это труда не составит, но вот
программисту-рельсовику придется голову поломать.</p>

<p>В своей следующей статье я более подробно остановлюсь на
этом вопросе.</p>

<h3>Заключение</h3>

<p>Я не пытался сделать подробное описание всех особенностей или сравнение
с рельсами. Это просто вольные мысли насчет первого опыта создания
приложения с использованием Phoenix Framework. Учитывая все факторы, а
также, что еще идет активная разработка, то я считаю этот опыт
положительным и вселяющим надежду, что Phoenix Framework станет отличной
альтернативой Ruby on Rails. Будем с охотой наблюдать за развитием!</p>

<h3>Полезные ссылки</h3>

<ul>
<li><a href="http://elixir-lang.org/">elixir-lang official</a></li>
<li><a href="http://www.phoenixframework.org/">phoenix framework official</a></li>
<li><a href="http://learnelixir.com/">learnelixir</a></li>
<li><a href="http://www.elixirdose.com/">elixirdose</a></li>
<li><a href="http://elixirsips.com/">elixirsips</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
